     // Time complexity - O(N3*N!)  (n cube * n factorial)
    // Space complexity -O(N*N)
import java.util.*;
public class HelloWorld {
    public static void main(String[] args){
        int n=4;
       boolean[][] board=new boolean[n][n];
       if(Nqueens(board,0)){
             printBoard(board);}
             else{
System.out.println("solution not exist for"+n+"Chess board");
             }
    }
public static boolean Nqueens(boolean[][] board,int row){
        if(row==board.length){
            return true;
        }
    for(int col=0;col<board.length;col++){
        if(isSafe(board,row,col)){
                board[row][col]=true;
        if(Nqueens(board,row+1)){
           return true;
        }
             board[row][col]=false;
        }}
        return false;
    }
    public static boolean isSafe(boolean[][] board,int row,int col){
        for(int i=0;i<row;i++){
            if(board[i][col]){
            return false;
        }}
        //upper-left diagonal
for(int i=row,j=col;i>=0&&j>=0;i--,j--){
          if(board[i][j]){
          return false;  
        }}
        //upper-rigth diagonal
for(int i=row,j=col;i>=0&&j<board.length;i--,j++){
         if(board[i][j]){
         return false;  
        }}
        return true;
    }
public static void printBoard(boolean board[][]){
    for(int i=0;i<board.length;i++){
        for(int j=0;j<board.length;j++){
            if(board[i][j]){
          System.out.print("Q"+" ");}
          else{
              System.out.print("X"+" ");
          }
        }
        System.out.println();
    }
}
}
